name: Main Pipeline

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release Version (optional)'
        required: false
        type: string
  # push:
  #   branches: [ "main" ]
  #   tags:
  #     - 'v*'
  # pull_request:
  #   branches: [ "main" ]

# permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    outputs:
      build_date: ${{ steps.set_outputs.outputs.build_date }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - run: npm ci
      - run: npm run build --if-present
      - run: npm test

      - name: Set outputs
        id: set_outputs
        run: echo "build_date=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output-${{ matrix.node-version }}
          path: .
          retention-days: 1

  docker-build:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    outputs:
      image_tags: ${{ steps.save_tags.outputs.all_tags }}

    steps:
      - uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output-${{ matrix.node-version }}
          path: .

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build -t my-app:node${{ matrix.node-version }} .

      - name: Tag Docker Image
        run: |
          BUILD_DATE=${{ needs.build.outputs.build_date }}
          IMAGE_TAG=node${{ matrix.node-version }}-$BUILD_DATE
          docker tag my-app:node${{ matrix.node-version }} my-app:$IMAGE_TAG
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Save image tag
        id: save_tags
        run: |
          echo "${{ matrix.node-version }}=my-app:${{ steps.tag_docker.outputs.image_tag }}" >> image_tags.txt
          cat image_tags.txt
          echo "all_tags=$(cat image_tags.txt | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT

      - name: Upload Docker Image Tags
        uses: actions/upload-artifact@v4
        with:
          name: docker-tags-${{ matrix.node-version }}
          path: image_tags.txt
          retention-days: 1

  deploy-to-ecr:
      needs: docker-build
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      runs-on: ubuntu-latest

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-region: eu-south-2
            role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}

        - name: Login to Amazon ECR
          id: login-ecr
          run: |
            aws ecr get-login-password --region eu-south-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-south-2.amazonaws.com

        - name: Download Docker Tags
          uses: actions/download-artifact@v4
          with:
            pattern: docker-tags-*
            path: docker-tags
            merge-multiple: true

        - name: Debug - List Downloaded Artifacts
          run: |
            ls -la docker-tags
            cat docker-tags/* || echo "No files found"

        - name: Push Images to ECR
          run: |
            # Rebuild Docker images from Dockerfile
            docker build -t my-app:18.x --build-arg NODE_VERSION=18 .
            docker build -t my-app:20.x --build-arg NODE_VERSION=20 .
            docker build -t my-app:22.x --build-arg NODE_VERSION=22 .

            # Tag and push images
            for node_version in 18.x 20.x 22.x; do
              echo "Processing Node.js version: $node_version"
              
              # Tag image for ECR
              docker tag my-app:$node_version ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-south-2.amazonaws.com/my-app:$node_version
              
              # Push image to ECR
              docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-south-2.amazonaws.com/my-app:$node_version
            done

            # Push latest tag (using 20.x as preferred version)
            docker tag my-app:20.x ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-south-2.amazonaws.com/my-app:latest
            docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-south-2.amazonaws.com/my-app:latest

  create-release:
      needs: [build, docker-build]
      if: |
        github.event_name == 'push' &&
        startsWith(github.ref, 'refs/tags/v')
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v4

        - name: Download All Docker Tags
          uses: actions/download-artifact@v4
          with:
            pattern: docker-tags-*
            path: docker-tags

        - name: Prepare Release Notes
          run: |
            echo "# Release ${{ github.ref_name }}" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "## Docker Images" >> RELEASE_NOTES.md

            cd docker-tags
            for tag_file in *; do
              while IFS= read -r line; do
                echo "- $line" >> ../RELEASE_NOTES.md
              done < "$tag_file"
            done

            echo "" >> ../RELEASE_NOTES.md
            echo "## Changes" >> ../RELEASE_NOTES.md
            echo "- Automated release for tag ${{ github.ref_name }}" >> ../RELEASE_NOTES.md

            cat ../RELEASE_NOTES.md

        - name: Create GitHub Release
          uses: softprops/action-gh-release@v2
          with:
            generate_release_notes: true
            draft: true
            prerelease: true
            token: ${{ secrets.APP_GITHUB_TOKEN }}
